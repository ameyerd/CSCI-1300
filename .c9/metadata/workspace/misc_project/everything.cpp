{"filter":false,"title":"everything.cpp","tooltip":"/Project2/everything.cpp","ace":{"folds":[],"scrolltop":3180,"scrollleft":0,"selection":{"start":{"row":190,"column":20},"end":{"row":190,"column":20},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":810,"mode":"ace/mode/c_cpp"}},"hash":"6fddc9bbb7f717e874da6b92dfed5c81873cd6d3","undoManager":{"mark":46,"position":46,"stack":[[{"start":{"row":0,"column":0},"end":{"row":17,"column":2},"action":"insert","lines":["class User {","    public:","        User();  // default constructor","        User(string, int [], int);  // parameterized constructor","        string getUsername();","        void setUsername(string);","        int getRatingAt(int);","        bool setRatingAt(int, int);","        int getNumRatings();","        void setNumRatings(int);","        int getSize();","    private: // cannot be accessed by outside","        string username;","        int size;","        int ratings[50];","        int numRatings;","    ","};"],"id":1}],[{"start":{"row":17,"column":2},"end":{"row":18,"column":0},"action":"insert","lines":["",""],"id":2},{"start":{"row":18,"column":0},"end":{"row":19,"column":0},"action":"insert","lines":["",""]}],[{"start":{"row":19,"column":0},"end":{"row":74,"column":0},"action":"insert","lines":["User::User() {","    username = \"\";","    numRatings = 0;","    size = 50;","    for (int i = 0; i < 50; i++) {","        ratings[i] = 0;","    }","}","User::User(string username, int rating[], int numRatings) {","    if (numRatings <= 50) {","        this->username = username;","        ","        for (int i = 0; i < numRatings; i++) {","            ratings[i] = rating[i];","        }","        for (int i = numRatings; i < 50; i++) {","            ratings[i] = 0;","        }","        this->numRatings = numRatings;","    }","    ","}","void User::setUsername(string name) {","    username = name;","}","string User::getUsername() {","    return username;","}","bool User::setRatingAt(int index, int value) {","    if ((value <= 5 && value >= 0) && (index < 50 && index >= 0)) {","        ratings[index] = value;","        return true;","    }","    else{","        return false;","    }","    ","}","int User::getRatingAt(int index) {","    if (index >= 50) {","        return -1;","    }","    else {","        return ratings[index];","    }","}","void User::setNumRatings(int numRatings) {","    this->numRatings = numRatings;","}","int User::getNumRatings() {","    return numRatings;","}","int User::getSize() {","    return size;","}",""],"id":3}],[{"start":{"row":74,"column":0},"end":{"row":75,"column":0},"action":"insert","lines":["",""],"id":4}],[{"start":{"row":0,"column":0},"end":{"row":1,"column":0},"action":"insert","lines":["",""],"id":5},{"start":{"row":1,"column":0},"end":{"row":2,"column":0},"action":"insert","lines":["",""]}],[{"start":{"row":0,"column":0},"end":{"row":12,"column":2},"action":"insert","lines":["class Book {","    public:","        Book();  // default constructor","        Book(string, string);  // parameterized constructor","        string getTitle();","        void setTitle(string);","        string getAuthor();","        void setAuthor(string);","    private: // cannot be accessed by outside","        string title;","        string author;","","};"],"id":6}],[{"start":{"row":12,"column":2},"end":{"row":13,"column":0},"action":"insert","lines":["",""],"id":7},{"start":{"row":13,"column":0},"end":{"row":14,"column":0},"action":"insert","lines":["",""]}],[{"start":{"row":14,"column":0},"end":{"row":32,"column":1},"action":"insert","lines":["Book::Book() {","    ","}","Book::Book(string title, string author) {","    this->title = title;","    this->author = author;","}","void Book::setTitle(string title) {","    this->title = title;","}","string Book::getTitle() {","    return title;","}","void  Book::setAuthor(string author) {","    this->author = author;","}","string Book::getAuthor() {","    return author;","}"],"id":8}],[{"start":{"row":32,"column":1},"end":{"row":33,"column":0},"action":"insert","lines":["",""],"id":9}],[{"start":{"row":110,"column":0},"end":{"row":137,"column":2},"action":"insert","lines":["class Library {","    public:","        Library();      // default constructor","        int getSizeBook();","        int getSizeUser();","        int getNumBooks();","        int getNumUsers();","        int readBooks(string);","        void printAllBooks();","        int readRatings(string);","        int getRating(string,string);","        int getCountReadBooks(string);","        void viewRatings(string);","        double calcAvgRating(string);","        int addUser(string);","        int checkOutBook(string,string,int);","        void getRecommendations(string);","        int ssd(int,int);","    private:","        int const static sizeBook = 50;","        int const static sizeUser = 100;","        Book books[50];","        User users[100];","        int numBooks;","        int numUsers;","    ","  ","};"],"id":10}],[{"start":{"row":137,"column":2},"end":{"row":138,"column":0},"action":"insert","lines":["",""],"id":11},{"start":{"row":138,"column":0},"end":{"row":139,"column":0},"action":"insert","lines":["",""]}],[{"start":{"row":139,"column":0},"end":{"row":707,"column":1},"action":"insert","lines":["//split function","int split(string str, char c, string array[], int num) {","    ","    if (str.length() == 0) {","        return 0;","    }","    int a = 0;","    string word = \"\";","    int j = 0;","    str = str + c;","    for (int i = 0; i < str.length(); i++)","    {","        if (str[i] == c) ","        {","        \tif (word.length() == 0) continue;","        \tarray[a] = word; ","        \ta++;","            j++;","            word = \"\";","        } else {","            word = word + str[i];","        }","    }","    return j ;","    ","}","","// to lower function","string slower(string s) {","    string slow = \"\";","    for (int r = 0; r < s.length(); r++) {","        slow += tolower(s[r]);","    }","    return slow;","}","","","","// --------------------------","","Library::Library() {","    numBooks = 0;","    numUsers = 0;","}","int Library::getSizeBook() {","    return sizeBook;","}","int Library::getSizeUser() {","    return sizeUser;","}","int Library::getNumBooks() {","    return numBooks;","}","int Library::getNumUsers() {","    return numUsers;","}","int Library::readBooks(string fileName) {","    ","    ifstream fp;","    fp.open(fileName.c_str());","    ","    if (numBooks == sizeBook) {","        return -2;","    }","    ","    ","    if (fp.is_open()) {","        string temp_array[2];","        string s = \"\";","        while (getline(fp, s)) { // read line","            if (s.length() == 0) continue;","            ","            split(s, ',', temp_array, 2); // use split function","            string author = temp_array[0]; // first column is the author","            string title = temp_array[1]; // second column is the title of book","            ","            books[numBooks].setAuthor(author); // store into authors array","            books[numBooks].setTitle(title); // store into title array","            ","            numBooks++;","            ","            if (numBooks == sizeBook) {","                break;","            }","            ","                ","        }","        ","        ","        fp.close();","        return numBooks;","        ","        }","        else {","        return -1;","        ","    }","    /*Takes a string (the name of the file to be read) and","populates the books array. Returns the total","number of books in books array as an integer */","}","","void Library::printAllBooks() {","    // prints all books stored in books array","    ","    if (numBooks <= 0) { ","        cout << \"No books are stored\" << endl;","    }","    else {","        int i = 0;","        cout << \"Here is a list of books\" << endl;","        while(i < numBooks) {","            cout << books[i].getTitle() << \" by \" << books[i].getAuthor() << endl;","            i++;","        }","    }","    ","}","","int Library::readRatings(string fileName) {","    /* Takes a string (the name of the file to be read) and","populates the users array. Returns the total","number of users in users array as an integer */","","    // declare variable and open file","    ifstream fp;","    fp.open(fileName.c_str());","    ","    // if numUsers is equal to max rows then return -2","    if (numUsers == sizeUser) {","        return -2;","    }","    ","    // check if file is open","    if (fp.is_open()) {","        ","        // declare string and array","        string s;","        string rating_array[51];","        ","        // while function that reads the file","        while (getline(fp, s)) {","            //Check Empties","            if (s == \"\") continue;","            ","            //check if it has reached maxRows","            if(numUsers == sizeUser) {","                    break;","                }","            // use split function","            split(s, ',', rating_array, 51);","            ","            ","            // for loop for ratings","            int b = 0;","            for (int j = 1; j < split(s, ',', rating_array, 51) ; j++) {","                ","                ","                // declare new string for rating values","                string r = rating_array[j];","                // stoi ","                int rating_int = stoi(r);","                // store into ratings[numUsers][j]","                users[numUsers].setRatingAt(b, rating_int); // if not j then b","                // reset string r","                r = \"\";","                b++;","                ","            }","         ","            ","            // declare user variable to store 0th column (names) of rating_array","            string user = rating_array[0];","            // store into users[numUsers] array","            users[numUsers].setUsername(user);","            // increment i","            numUsers++;","            ","        }","        ","        // close file","        fp.close();","        // return numUsers;","        return numUsers;","        ","    }","    // else statement if file isn't open","    else {","        return -1;","    }","","","} ","","","int Library::getRating(string username, string title) {","    /* Takes two strings (username and book title) and","returns that user’s rating for the specified book */","    // first char is uppercase, rest is lowercase","  ","    username = slower(username);","    title = slower(title);","    // -----------------------------------","    // if numBooks = 0 return -3;","    if (numBooks == 0) {","        return -3;","    }","    ","    // if there are 0 usernames in the array return -3","    int user_count = 0;","    ","    for (int i = 0; i < numUsers; i++) {","        ","        string newstr_user = slower(users[i].getUsername());","","        if (newstr_user == username) { // here","            users[i].setUsername(username); // here","            user_count++;","            ","            int j = 0;","            while ( j < numBooks) {","                ","                string newstr = slower(books[j].getTitle());","","                if(newstr != title) {  // here","                    j++;","                }","                else {","                        break;","","                }","            if (j == numBooks) {","                return -3;","            }","                ","                ","            }","            ","            // getRating at index i","            int rating = users[i].getRatingAt(j); // here","            return rating;  ","            }","            ","        else {","            if (newstr_user != username) {  // here","                // do nothing","            }","            if (newstr_user != username && i == numUsers - 1) {  // here","                return -3;","            }","            ","        }","    ","    }","    ","    if (user_count == 0) { // if zero usernames in user array","        return -3;","    }","","","}","","","int Library::getCountReadBooks(string username) {","    /* Takes a string (username) and returns the number","of books read by that user as an integer. */","    //string username1 = slower(username);","    ","    // go through ratings","    // if rating is not zero then increase count","    // if it is then don't do anything","    ","    username = slower(username);","    int countbooks = 0;","    ","    for (int i = 0; i < numUsers; i++) {","        ","        string newstr = slower(users[i].getUsername());","        if(username == newstr) {","            ","            for (int j = 0; j < numBooks; j++) {","                if (users[i].getRatingAt(j) != 0) {","                    countbooks++;","                }","            }","            return countbooks;","        }","        ","        if (newstr != username) {","                // do nothing","            }","        if (i == numUsers -1 && newstr != username) {","                return -3;","            }","    }","}","","void Library::viewRatings(string username) {","    /*  Takes a string (username) and prints all the books","a user has provided ratings for. */","    string username_new = slower(username);","    int countrating = 0;","    ","    for (int i = 0; i < numUsers; i++) {","        ","        string newstr = slower(users[i].getUsername());","        if(username_new == newstr) {","            ","            for (int j = 0; j < numBooks; j++) {","                if (users[i].getRatingAt(j) != 0) {","                    if (countrating == 0) {","                        cout << \"Here are the books that \" << username << \" rated.\" << endl;","                        cout << \"Title: \" << books[j].getTitle() << endl;","                        cout << \"Rating: \" << users[i].getRatingAt(j) << endl;","                        cout << \"-----\" << endl;","                    }","                    else if (countrating > 0) {","                        cout << \"Title: \" << books[j].getTitle() << endl;","                        cout << \"Rating: \" << users[i].getRatingAt(j) << endl;","                        cout << \"-----\" << endl;","                    }","                    countrating++;","                    ","                }","            }","            if (countrating == 0) {","                cout << username << \" has not rated any books yet.\" << endl;","            }","","        }","        ","        if (newstr != username_new) {","                // do nothing","            }","        if (i == numUsers -1 && newstr != username_new) {","            if (countrating == 0) {","                cout << username << \" does not exist.\" << endl;","            }","        }","    }","    ","","}","","","double Library::calcAvgRating(string title) {","    /* Takes a string (the title of a book) and returns the","average rating of the specified book as a double */","    title = slower(title);","    ","    double sum = 0;","    double readcount = 0;","    for (int i = 0; i < numBooks; i++) {","        ","        string newstr = slower(books[i].getTitle());","        if (title == newstr) {","            // if the user rating is not equal to zero add them for that book","            for (int j = 0; j < numUsers; j++) {","                if (users[j].getRatingAt(i) != 0) {","                    sum += users[j].getRatingAt(i);","                    readcount++;","                }","                ","            }","            if (readcount == 0) {","                return 0;","            }","            double avg = sum / readcount;","            return avg;","   ","        }","        if (title != newstr) {","            ","        }","        if (title != newstr && i == numBooks - 1) {","            return -3;","        }","","    }","}","","","int Library::addUser(string username) {","    /*  Takes a string (username) and returns an integer 1","if the user is successfully added, 0 if the username","already exists in the users array and -2 if the users","array is already full.  */","    int ratings[50];","    // check if array is full first","    if (numUsers == sizeUser) {","        return -2;","    }","    string username_new = slower(username);","    // check if user exists in the array, if so return 0","    if (numUsers == 0) {","        for (int k = 0; k < numBooks; k++) {","                    ratings[k] = 0;","                }","                ","        users[numUsers]=User(username, ratings , sizeBook);","        numUsers++;","        return 1;","    }","    for (int i = 0; i < numUsers; i++) {","        string newstr = slower(users[i].getUsername());","        ","        if(username_new == newstr) {","            return 0;","        }","        if (username_new != newstr) {","            ","            }","        if (username_new != newstr && i == numUsers - 1) {","            for (int k = 0; k < numBooks; k++) {","                    ratings[k] = 0;","                }","                ","            users[numUsers]=User(username, ratings , sizeBook);","            numUsers++;","            return 1;","        }","            ","    }","        ","}","  ","","","int Library::checkOutBook(string username, string title, int new_rating) {","    /*  Takes two strings and an integer for username, title","of book, and a new rating, respectively (in this","order). Returns an integer 1 if the rating is","successfully updated, -4 if the rating value is not","valid and -3 if the rating value is valid, but the user","or title does not exist in the database. */","    // check if rating is valid","    ","    username = slower(username);","    title = slower(title);","    if (new_rating >= 0 && new_rating <= 5) {","        for (int i = 0; i < numUsers; i++) {","            ","            // check if username exists","            string newstr = slower(users[i].getUsername());","            if (username == newstr) {","                // check if title exists","                for (int j = 0; j < numBooks; j++) {","                    string new_title = slower(books[j].getTitle());","                    if (title == new_title) {","                        // here","                        users[i].setRatingAt(j, new_rating);","                        return 1;","                        ","                    }","                    if (title != new_title) {","                        // do nothing","                    }","                    if (title != new_title && j == numBooks -1) {","                        return -3;","                    }","                }","","            }","            if (username != newstr) {","                // do nothing","            }","            if (username != newstr && i == numUsers - 1) {","                return -3;","            }","            ","        }","        ","    }","    else {","        return -4;","    }","","}","","// SSD function","// parameters: index of the two users","int Library::ssd(int user1, int user2) {","    int sum = 0;","    for(int i = 0; i < numBooks; i++) {","        int a = users[user1].getRatingAt(i);","        int b = users[user2].getRatingAt(i);","        int diff = (a - b) * (a - b);","        sum = sum + diff;","    }","    return sum;","    ","}","","","void Library::getRecommendations(string username) {","    /*Takes a string username and prints the first 5 book","recommendations from the most similar (other) user.  */","    string username_new = slower(username);","    int user_index;","    int minspot;","    int min_ssd = 10000;","    int count = 0;","    int num = 5;","    ","    // check if username exists","    for(int i = 0; i < numUsers; i++) {","        string newstr = slower(users[i].getUsername());","        ","        if (username_new == newstr) {","            user_index = i;","            break;","        }","        if (username_new != newstr) {","            // do nothing","        }","        if (username_new != newstr && i == numUsers - 1) {","            cout << username << \" does not exist.\" << endl;","            num++;","        }","        ","    }","    ","    //ssd","    if(num == 5) {","        for (int j = 0; j < numUsers; j++) {","            ","            if (j == user_index) continue;","                    ","            if (getCountReadBooks(users[j].getUsername()) == 0) continue;","            ","            int numb = ssd(user_index, j);","            ","            if (numb < min_ssd) {","                min_ssd = numb;","                minspot = j;","                    ","                cout << \"ssd: \" << min_ssd << endl;","                ","            }","            ","        }","    }","    ","    //reccomendations","    if (num == 5) {","        for (int k = 0; k < numBooks; k++) {","            ","            // if user has not rated the book","            if (users[user_index].getRatingAt(k) == 0) {","                //check if the other user rating is 3,4 or 5","                if (users[minspot].getRatingAt(k) >= 3 && users[minspot].getRatingAt(k) <=5) {","                    if (count == 0) {","                        cout << \"Here is the list of recommendations\" << endl;","                        count++;","                    }","                    if (count > 0) {","                        cout << books[k].getTitle() << \" by \" << books[k].getAuthor() << endl;","                    }","                }","            }","            if (count == 0 && k == numBooks - 1) {","                cout << \"There are no reccomendations for \" << username << \" at present\" << endl;","            }","            ","        }","    }","  ","","}"],"id":12}],[{"start":{"row":675,"column":11},"end":{"row":675,"column":51},"action":"remove","lines":["     cout << \"ssd: \" << min_ssd << endl;"],"id":13},{"start":{"row":675,"column":10},"end":{"row":675,"column":11},"action":"remove","lines":[" "]},{"start":{"row":675,"column":9},"end":{"row":675,"column":10},"action":"remove","lines":[" "]},{"start":{"row":675,"column":8},"end":{"row":675,"column":9},"action":"remove","lines":[" "]},{"start":{"row":675,"column":4},"end":{"row":675,"column":8},"action":"remove","lines":["    "]},{"start":{"row":675,"column":0},"end":{"row":675,"column":4},"action":"remove","lines":["    "]},{"start":{"row":674,"column":20},"end":{"row":675,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":451,"column":38},"end":{"row":451,"column":39},"action":"insert","lines":[" "],"id":14}],[{"start":{"row":452,"column":39},"end":{"row":452,"column":40},"action":"insert","lines":[" "],"id":15}],[{"start":{"row":456,"column":38},"end":{"row":456,"column":39},"action":"insert","lines":[" "],"id":16}],[{"start":{"row":457,"column":39},"end":{"row":457,"column":40},"action":"insert","lines":[" "],"id":17}],[{"start":{"row":450,"column":81},"end":{"row":450,"column":82},"action":"remove","lines":["."],"id":18}],[{"start":{"row":699,"column":87},"end":{"row":699,"column":88},"action":"insert","lines":["."],"id":19}],[{"start":{"row":699,"column":41},"end":{"row":699,"column":42},"action":"remove","lines":["c"],"id":20}],[{"start":{"row":699,"column":43},"end":{"row":699,"column":44},"action":"insert","lines":["m"],"id":21}],[{"start":{"row":641,"column":16},"end":{"row":642,"column":0},"action":"insert","lines":["",""],"id":22},{"start":{"row":642,"column":0},"end":{"row":642,"column":4},"action":"insert","lines":["    "]},{"start":{"row":642,"column":4},"end":{"row":642,"column":5},"action":"insert","lines":["i"]},{"start":{"row":642,"column":5},"end":{"row":642,"column":6},"action":"insert","lines":["n"]},{"start":{"row":642,"column":6},"end":{"row":642,"column":7},"action":"insert","lines":["t"]}],[{"start":{"row":642,"column":7},"end":{"row":642,"column":8},"action":"insert","lines":[" "],"id":23},{"start":{"row":642,"column":8},"end":{"row":642,"column":9},"action":"insert","lines":["m"]},{"start":{"row":642,"column":9},"end":{"row":642,"column":10},"action":"insert","lines":["a"]},{"start":{"row":642,"column":10},"end":{"row":642,"column":11},"action":"insert","lines":["x"]}],[{"start":{"row":642,"column":11},"end":{"row":642,"column":12},"action":"insert","lines":[" "],"id":24},{"start":{"row":642,"column":12},"end":{"row":642,"column":13},"action":"insert","lines":["="]}],[{"start":{"row":642,"column":13},"end":{"row":642,"column":14},"action":"insert","lines":[" "],"id":25},{"start":{"row":642,"column":14},"end":{"row":642,"column":15},"action":"insert","lines":["5"]}],[{"start":{"row":642,"column":14},"end":{"row":642,"column":15},"action":"remove","lines":["5"],"id":26}],[{"start":{"row":642,"column":14},"end":{"row":642,"column":15},"action":"insert","lines":["0"],"id":27},{"start":{"row":642,"column":15},"end":{"row":642,"column":16},"action":"insert","lines":[";"]}],[{"start":{"row":697,"column":17},"end":{"row":698,"column":0},"action":"insert","lines":["",""],"id":28},{"start":{"row":698,"column":0},"end":{"row":698,"column":16},"action":"insert","lines":["                "]}],[{"start":{"row":698,"column":16},"end":{"row":698,"column":17},"action":"insert","lines":["m"],"id":29},{"start":{"row":698,"column":17},"end":{"row":698,"column":18},"action":"insert","lines":["a"]},{"start":{"row":698,"column":18},"end":{"row":698,"column":19},"action":"insert","lines":["x"]},{"start":{"row":698,"column":19},"end":{"row":698,"column":20},"action":"insert","lines":["+"]}],[{"start":{"row":698,"column":20},"end":{"row":698,"column":21},"action":"insert","lines":["+"],"id":30},{"start":{"row":698,"column":21},"end":{"row":698,"column":22},"action":"insert","lines":[";"]}],[{"start":{"row":687,"column":53},"end":{"row":687,"column":54},"action":"insert","lines":[" "],"id":31},{"start":{"row":687,"column":54},"end":{"row":687,"column":55},"action":"insert","lines":["&"]},{"start":{"row":687,"column":55},"end":{"row":687,"column":56},"action":"insert","lines":["&"]}],[{"start":{"row":687,"column":56},"end":{"row":687,"column":57},"action":"insert","lines":[" "],"id":32},{"start":{"row":687,"column":57},"end":{"row":687,"column":58},"action":"insert","lines":["m"]},{"start":{"row":687,"column":58},"end":{"row":687,"column":59},"action":"insert","lines":["a"]},{"start":{"row":687,"column":59},"end":{"row":687,"column":60},"action":"insert","lines":["x"]}],[{"start":{"row":687,"column":60},"end":{"row":687,"column":61},"action":"insert","lines":["<"],"id":33},{"start":{"row":687,"column":61},"end":{"row":687,"column":62},"action":"insert","lines":["5"]}],[{"start":{"row":687,"column":61},"end":{"row":687,"column":62},"action":"insert","lines":[" "],"id":34}],[{"start":{"row":687,"column":60},"end":{"row":687,"column":61},"action":"insert","lines":[" "],"id":35}],[{"start":{"row":698,"column":16},"end":{"row":698,"column":22},"action":"remove","lines":["max++;"],"id":36}],[{"start":{"row":687,"column":63},"end":{"row":687,"column":64},"action":"remove","lines":["5"],"id":37},{"start":{"row":687,"column":62},"end":{"row":687,"column":63},"action":"remove","lines":[" "]},{"start":{"row":687,"column":61},"end":{"row":687,"column":62},"action":"remove","lines":["<"]},{"start":{"row":687,"column":60},"end":{"row":687,"column":61},"action":"remove","lines":[" "]},{"start":{"row":687,"column":59},"end":{"row":687,"column":60},"action":"remove","lines":["x"]},{"start":{"row":687,"column":58},"end":{"row":687,"column":59},"action":"remove","lines":["a"]},{"start":{"row":687,"column":57},"end":{"row":687,"column":58},"action":"remove","lines":["m"]},{"start":{"row":687,"column":56},"end":{"row":687,"column":57},"action":"remove","lines":[" "]},{"start":{"row":687,"column":55},"end":{"row":687,"column":56},"action":"remove","lines":["&"]},{"start":{"row":687,"column":54},"end":{"row":687,"column":55},"action":"remove","lines":["&"]},{"start":{"row":687,"column":53},"end":{"row":687,"column":54},"action":"remove","lines":[" "]}],[{"start":{"row":642,"column":14},"end":{"row":642,"column":15},"action":"remove","lines":["0"],"id":38}],[{"start":{"row":642,"column":14},"end":{"row":642,"column":15},"action":"insert","lines":["5"],"id":39}],[{"start":{"row":696,"column":21},"end":{"row":697,"column":0},"action":"insert","lines":["",""],"id":40},{"start":{"row":697,"column":0},"end":{"row":697,"column":20},"action":"insert","lines":["                    "]}],[{"start":{"row":689,"column":91},"end":{"row":689,"column":92},"action":"insert","lines":[" "],"id":41},{"start":{"row":689,"column":92},"end":{"row":689,"column":93},"action":"insert","lines":["&"]},{"start":{"row":689,"column":93},"end":{"row":689,"column":94},"action":"insert","lines":["&"]}],[{"start":{"row":689,"column":94},"end":{"row":689,"column":95},"action":"insert","lines":[" "],"id":42},{"start":{"row":689,"column":95},"end":{"row":689,"column":96},"action":"insert","lines":["m"]},{"start":{"row":689,"column":96},"end":{"row":689,"column":97},"action":"insert","lines":["a"]},{"start":{"row":689,"column":97},"end":{"row":689,"column":98},"action":"insert","lines":["x"]}],[{"start":{"row":689,"column":98},"end":{"row":689,"column":99},"action":"insert","lines":[" "],"id":43},{"start":{"row":689,"column":99},"end":{"row":689,"column":100},"action":"insert","lines":["<"]}],[{"start":{"row":689,"column":100},"end":{"row":689,"column":101},"action":"insert","lines":[" "],"id":44},{"start":{"row":689,"column":101},"end":{"row":689,"column":102},"action":"insert","lines":["5"]}],[{"start":{"row":697,"column":20},"end":{"row":697,"column":21},"action":"insert","lines":["m"],"id":45},{"start":{"row":697,"column":21},"end":{"row":697,"column":22},"action":"insert","lines":["a"]},{"start":{"row":697,"column":22},"end":{"row":697,"column":23},"action":"insert","lines":["x"]},{"start":{"row":697,"column":23},"end":{"row":697,"column":24},"action":"insert","lines":["+"]},{"start":{"row":697,"column":24},"end":{"row":697,"column":25},"action":"insert","lines":["+"]},{"start":{"row":697,"column":25},"end":{"row":697,"column":26},"action":"insert","lines":[";"]}],[{"start":{"row":642,"column":14},"end":{"row":642,"column":15},"action":"remove","lines":["5"],"id":46}],[{"start":{"row":642,"column":14},"end":{"row":642,"column":15},"action":"insert","lines":["0"],"id":47}]]},"timestamp":1553327715228}